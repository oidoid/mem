#!/usr/bin/env -S fontforge -quiet -script

import fontforge
import json
import re
import sys

# Size of a pixel in fractions of an em? For example, if the font is 6px tall,
# an em is 600. I guess it's a ratio.
pixels_to_ems = 100

def main(sfd, metaFilename, svgFilenames):
  meta = readJSON(metaFilename)
  package = readJSON('../package.json')

  font = fontforge.font()

  font.version = package['version']
  font.familyname = meta['name']
  font.fontname = meta['id']
  font.fullname = meta['name']

  font.copyright = 'Â© oidoid'
  # Suppress time-based comment and unique ID that hinder build determinism.
  font.comment = None
  font.xuid = None

  # Import glyphs with decent eequal to zero
  font.ascent = meta['cellHeight'] * pixels_to_ems
  font.descent = 0

  font.addLookup('kern', 'gpos_pair', 0, [['kern', [["dflt", ["dflt"]]]]])
  font.addLookupSubtable('kern', 'kern-lut')

  for key in range(128):
    glyph = font.createChar(key)
    glyph.width = glyphWidth(meta, chr(key))

  for svgFilename in svgFilenames:
    char = filenameToCharCode(svgFilename)
    glyph = font.createChar(char)
    glyph.importOutlines(svgFilename)
    # [sx, 0, 0, sy, tx, ty]
    glyph.transform([1, 0, 0, 1, 0, -meta['baseline'] * pixels_to_ems], ['round'])

  for key in range(128):
    glyph = font.createChar(key)
    kernGlyph(meta, glyph)

  font.ascent += -meta['baseline'] * pixels_to_ems
  font.descent = max(meta['baseline'], meta['leading']) * pixels_to_ems

  # These don't seem necessary but the instructions produce results like Times New Roman.
  # http://designwithfontforge.com/en-US/Line_Spacing.html
  font.os2_winascent = font.ascent
  font.os2_typoascent = font.ascent
  font.hhea_ascent = font.ascent
  font.os2_windescent = font.descent
  font.os2_typodescent = -font.descent
  font.hhea_descent = font.descent

  font.os2_winascent_add = False
  font.os2_typoascent_add = False
  font.hhea_ascent_add = False
  font.os2_windescent_add = False
  font.os2_typodescent_add = False
  font.hhea_descent_add = False

  font.save(sfd)

def kernGlyph(meta, glyph):
  for key in range(128):
    if chr(key) == '\n':
      defaultVal = meta['endOfLineKerning']
    elif chr(key).isspace():
      defaultVal = meta['defaultWhitespaceKerning']
    else:
      defaultVal = meta['defaultKerning']
    kerning = meta['kerning'].get(chr(glyph.unicode) + chr(key), defaultVal)
    ems = pixels_to_ems * kerning

    glyph.addPosSub('kern-lut', fontforge.nameFromUnicode(key), ems)

def glyphWidth(meta, char):
  return charWidth(meta, char) * pixels_to_ems

def charWidth(meta, char):
  return meta['charWidth'].get(char, meta['defaultCharWidth'])

# Accepts a filename in the following format mem-fontxxx.svg where xxx is the
# code without padding.
def filenameToCharCode(filename):
  hex = re.sub('.*dist/char/mem-(?:prop|mono)-\dx\d-([0-9a-f]{2})-10x\.svg', r'\1', filename)
  return int(hex, 16)

def readJSON(filename):
  with open(filename) as file:
    return json.load(file)

if __name__ == '__main__':
  sfd = sys.argv[1]
  metaFilename = sys.argv[2]
  svgFilenames = sys.argv[3:]
  main(sfd, metaFilename, svgFilenames)
